apply plugin: 'com.android.application'

android {
    namespace "com.elpulpo.darts"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.elpulpo.darts"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode project.VUE_APP_VERSION_CODE.toInteger()
        versionName project.VUE_APP_VERSION_NAME
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

// Update versionCode and versionName in gradle.properties and .env
task updateVersionFiles {
    doLast {
        def propertiesFile = file("${rootDir}/gradle.properties")
        def envFile = file("${rootDir}/../.env")

        // Load gradle.properties
        def properties = new Properties()
        properties.load(new FileInputStream(propertiesFile))

        // Get current version name and version code
        def currentVersionName = properties.VUE_APP_VERSION_NAME
        def currentVersionCode = properties.VUE_APP_VERSION_CODE.toInteger()

        // Split the version (major.minor.patch)
        def versionParts = currentVersionName.split("\\.")
        def major = versionParts[0]
        def minor = versionParts[1]
        def patch = versionParts[2].toInteger() + 1 // Increment patch version

        // Generate new version name
        def newVersionName = "${major}.${minor}.${patch}"

        // Update versionCode and versionName in gradle.properties
        properties.setProperty("VUE_APP_VERSION_CODE", (currentVersionCode + 1).toString())
        properties.setProperty("VUE_APP_VERSION_NAME", newVersionName)
        properties.store(new FileOutputStream(propertiesFile), null)

        println "Updated gradle.properties with VUE_APP_VERSION_CODE=${currentVersionCode + 1} and VUE_APP_VERSION_NAME=${newVersionName}"

        // Update .env file
        println "Updating .env at: ${envFile.absolutePath}"
        if (envFile.exists()) {
            def envContent = envFile.text
            envContent = envContent.replaceFirst(/VUE_APP_VERSION_NAME=.*/, "VUE_APP_VERSION_NAME=${newVersionName}")
            envFile.text = envContent
        } else {
            envFile.write("VUE_APP_VERSION_NAME=${newVersionName}\n")
        }

        println "Updated .env with VUE_APP_VERSION_NAME=${newVersionName}"
    }
}

// Ensure the version files are updated before building
preBuild.dependsOn updateVersionFiles

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
